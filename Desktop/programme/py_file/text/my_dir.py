#运算符
a = 1%2 #取余
b = 1//2 #整除，向下取整
#a ?= b 相当与 a= a?b

"""二进制运算
a=60 b=13
&  : a&b==12   如果两个相应位都为1,则该位的结果为1,否则为0
|  :按位或运算符：只要对应的二个二进位有一个为1时，结果位就为1。	(a | b) 输出结果 61 ，二进制解释： 0011 1101
^  :按位异或运算符：当两对应的二进位相异时，结果为1	(a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~  :按位取反运算符：将二进制表示中的每一位取反，0 变为 1，1 变为 0。~x 类似于 -x-1	(~a ) 输出结果 -61 ，二进制解释： 1100 0011 (以补码形式表示)，在一个有符号二进制数的补码形式。
<< :左移动运算符：运算数的各二进位全部左移若干位，由 << 右边的数字指定了移动的位数，高位丢弃，低位补0。	a << 2 输出结果 240 ，二进制解释： 1111 0000
>> :右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，>> 右边的数字指定了移动的位数	a >> 2 输出结果 15 ，二进制解释： 0000 1111

"""
#循环
"""
while :
break  终止循环并跳出循环
continue  终止当前循环，进行下一次循环
pass  空语句 保持结构完整
"""
while 1:
    pass
    print(1)
    break

#数据类型
x = 1.145
int(x )         #将x转换为一个整数
long(x )        #将x转换为一个长整数
float(x )               #将x转换到一个浮点数
complex(real [,imag ])  #创建一个复数
str(x )                 #将对象 x 转换为字符串
repr(x )                #将对象 x 转换为表达式字符串
eval(str )              #用来计算在字符串中的有效Python表达式,并返回一个对象
tuple(s )               #将序列 s 转换为一个元组
list(s )                #将序列 s 转换为一个列表
chr(x )                 #将一个整数转换为一个字符
unichr(x )              #将一个整数转换为Unicode字符
ord(x )                 #将一个字符转换为它的整数值
hex(x )                 #将一个整数转换为一个十六进制字符串
oct(x )                 #将一个整数转换为一个八进制字符串

